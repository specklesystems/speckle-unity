<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpeckleCore2</name>
    </assembly>
    <members>
        <member name="M:Speckle.Core.Api.Client.UserGet(System.String)">
            <summary>
            Gets the current user.
            </summary>
            <param name="id">If provided, retrieves th user with this user Id</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.UserGet(System.Threading.CancellationToken,System.String)">
            <summary>
            Gets the current user.
            </summary>
            <param name="id">If provided, retrieves th user with this user Id</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.UserSearch(System.String,System.Int32)">
            <summary>
            Searches for a user on the server.
            </summary>
            <param name="query">String to search for. Must be at least 3 characters</param>
            <param name="limit">Max number of users to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.UserSearch(System.Threading.CancellationToken,System.String,System.Int32)">
            <summary>
            Searches for a user on the server.
            </summary>
            <param name="query">String to search for. Must be at least 3 characters</param>
            <param name="limit">Max number of users to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGet(System.String,System.Int32)">
            <summary>
            Gets a stream by id including basic branch info (id, name, description, and total commit count).
            For detailed commit and branch info, use StreamGetCommits and StreamGetBranches respectively.
            </summary>
            <param name="id">Id of the stream to get</param>
            <param name="branchesLimit">Max number of branches to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGet(System.Threading.CancellationToken,System.String,System.Int32)">
            <summary>
            Gets a stream by id including basic branch info (id, name, description, and total commit count).
            For detailed commit and branch info, use StreamGetCommits and StreamGetBranches respectively.
            </summary>
            <param name="id">Id of the stream to get</param>
            <param name="branchesLimit">Max number of branches to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamsGet(System.Int32)">
            <summary>
            Gets all streams for the current user
            </summary>
            <param name="limit">Max number of streams to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamsGet(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Gets all streams for the current user
            </summary>
            <param name="limit">Max number of streams to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.FavoriteStreamsGet(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Gets all favorite streams for the current user
            </summary>
            <param name="limit">Max number of streams to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamSearch(System.String,System.Int32)">
            <summary>
            Searches the user's streams by name, description, and ID
            </summary>
            <param name="query">String query to search for</param>
            <param name="limit">Max number of streams to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamSearch(System.Threading.CancellationToken,System.String,System.Int32)">
            <summary>
            Searches the user's streams by name, description, and ID
            </summary>
            <param name="query">String query to search for</param>
            <param name="limit">Max number of streams to return</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamCreate(Speckle.Core.Api.StreamCreateInput)">
            <summary>
            Creates a stream.
            </summary>
            <param name="streamInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamCreate(System.Threading.CancellationToken,Speckle.Core.Api.StreamCreateInput)">
            <summary>
            Creates a stream.
            </summary>
            <param name="streamInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamUpdate(Speckle.Core.Api.StreamUpdateInput)">
            <summary>
            Updates a stream.
            </summary>
            <param name="streamInput">Note: the id field needs to be a valid stream id.</param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamUpdate(System.Threading.CancellationToken,Speckle.Core.Api.StreamUpdateInput)">
            <summary>
            Updates a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamInput">Note: the id field needs to be a valid stream id.</param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamDelete(System.String)">
            <summary>
            Deletes a stream.
            </summary>
            <param name="id">Id of the stream to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamDelete(System.Threading.CancellationToken,System.String)">
            <summary>
            Deletes a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="id">Id of the stream to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGrantPermission(Speckle.Core.Api.StreamGrantPermissionInput)">
            <summary>
            Grants permissions to a user on a given stream.
            </summary>
            <param name="permissionInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGrantPermission(System.Threading.CancellationToken,Speckle.Core.Api.StreamGrantPermissionInput)">
            <summary>
            Grants permissions to a user on a given stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="permissionInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamRevokePermission(Speckle.Core.Api.StreamRevokePermissionInput)">
            <summary>
            Revokes permissions of a user on a given stream.
            </summary>
            <param name="permissionInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamRevokePermission(System.Threading.CancellationToken,Speckle.Core.Api.StreamRevokePermissionInput)">
            <summary>
            Revokes permissions of a user on a given stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="permissionInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamInviteCreate(Speckle.Core.Api.StreamInviteCreateInput)">
            <summary>
            Sends an email invite to join a stream and assigns them a collaborator role.
            </summary>
            <param name="streamCreateInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamInviteCreate(System.Threading.CancellationToken,Speckle.Core.Api.StreamInviteCreateInput)">
            <summary>
            Sends an email invite to join a stream and assigns them a collaborator role.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamCreateInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetBranches(System.String,System.Int32,System.Int32)">
            <summary>
            Get branches from a given stream
            </summary>
            <param name="streamId">Id of the stream to get the branches from</param>
            <param name="branchesLimit">Max number of branches to retrieve</param>
            <param name="commitsLimit">Max number of commits to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetBranches(System.Threading.CancellationToken,System.String,System.Int32,System.Int32)">
            <summary>
            Get branches from a given stream
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the branches from</param>
            <param name="branchesLimit">Max number of branches to retrieve</param>
            <param name="commitsLimit">Max number of commits to retrieve</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchCreate(Speckle.Core.Api.BranchCreateInput)">
            <summary>
            Creates a branch on a stream.
            </summary>
            <param name="branchInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchCreate(System.Threading.CancellationToken,Speckle.Core.Api.BranchCreateInput)">
            <summary>
            Creates a branch on a stream.
            </summary>
            <param name="branchInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchGet(System.String,System.String,System.Int32)">
            <summary>
            Gets a given branch from a stream.
            </summary>
            <param name="streamId">Id of the stream to get the branch from</param>
            <param name="branchName">Name of the branch to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchGet(System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Gets a given branch from a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the branch from</param>
            <param name="branchName">Name of the branch to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchUpdate(Speckle.Core.Api.BranchUpdateInput)">
            <summary>
            Updates a branch.
            </summary>
            <param name="branchInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchUpdate(System.Threading.CancellationToken,Speckle.Core.Api.BranchUpdateInput)">
            <summary>
            Updates a branch.
            </summary>
            <param name="branchInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchDelete(Speckle.Core.Api.BranchDeleteInput)">
            <summary>
            Deletes a stream.
            </summary>
            <param name="branchInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.BranchDelete(System.Threading.CancellationToken,Speckle.Core.Api.BranchDeleteInput)">
            <summary>
            Deletes a stream.
            </summary>
            <param name="branchInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitGet(System.String,System.String)">
            <summary>
            Gets a given commit from a stream.
            </summary>
            <param name="streamId">Id of the stream to get the commit from</param>
            <param name="commitId">Id of the commit to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitGet(System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Gets a given commit from a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the commit from</param>
            <param name="commitId">Id of the commit to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetCommits(System.String,System.Int32)">
            <summary>
            Gets the latest commits from a stream
            </summary>
            <param name="streamId">Id of the stream to get the commits from</param>
            <param name="limit">Max number of commits to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetCommits(System.Threading.CancellationToken,System.String,System.Int32)">
            <summary>
            Gets the latest commits from a stream
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the commits from</param>
            <param name="limit">Max number of commits to get</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitCreate(Speckle.Core.Api.CommitCreateInput)">
            <summary>
            Creates a commit on a branch.
            </summary>
            <param name="commitInput"></param>
            <returns>The commit id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitCreate(System.Threading.CancellationToken,Speckle.Core.Api.CommitCreateInput)">
            <summary>
            Creates a commit on a branch.
            </summary>
            <param name="commitInput"></param>
            <returns>The commit id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitUpdate(Speckle.Core.Api.CommitUpdateInput)">
            <summary>
            Updates a commit.
            </summary>
            <param name="commitInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitUpdate(System.Threading.CancellationToken,Speckle.Core.Api.CommitUpdateInput)">
            <summary>
            Updates a commit.
            </summary>
            <param name="commitInput"></param>
            <returns>The stream's id.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitDelete(Speckle.Core.Api.CommitDeleteInput)">
            <summary>
            Deletes a commit.
            </summary>
            <param name="commitInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.CommitDelete(System.Threading.CancellationToken,Speckle.Core.Api.CommitDeleteInput)">
            <summary>
            Deletes a commit.
            </summary>
            <param name="commitInput"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetActivity(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            Gets the activity of a stream
            </summary>
            <param name="streamId">Id of the stream to get the commits from</param>
            <param name="after">Only show activity after this DateTime</param>
            <param name="before">Only show activity before this DateTime</param>
            <param name="cursor">Time to filter the activity with</param>
            <param name="actionType">Time to filter the activity with</param>
            <param name="limit">Max number of activity items to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.StreamGetActivity(System.Threading.CancellationToken,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            Gets the activity of a stream
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the commits from</param>
            <param name="after">Only show activity after this DateTime</param>
            <param name="before">Only show activity before this DateTime</param>
            <param name="cursor">Time to filter the activity with</param>
            <param name="actionType">Time to filter the activity with</param>
            <param name="limit">Max number of commits to get</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Speckle.Core.Api.Client.ObjectGet(System.String,System.String)">
            <summary>
            Gets a given object from a stream.
            </summary>
            <param name="streamId">Id of the stream to get the object from</param> 
            <param name="objectId">Id of the object to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.ObjectGet(System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Gets a given object from a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId">Id of the stream to get the object from</param>
            <param name="objectId">Id of the object to get</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.ObjectCountGet(System.String,System.String)">
            <summary>
            Gets a given object from a stream.
            </summary>
            <param name="streamId"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.ObjectCountGet(System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Gets a given object from a stream.
            </summary>
            <param name="cancellationToken"></param>
            <param name="streamId"></param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeBranchCreated(System.String)">
            <summary>
            Subscribe to events of branch created for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeBranchUpdated(System.String,System.String)">
            <summary>
            Subscribe to events of branch updated for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeBranchDeleted(System.String)">
            <summary>
            Subscribe to events of branch deleted for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeCommitCreated(System.String)">
            <summary>
            Subscribe to events of commit created for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeCommitUpdated(System.String,System.String)">
            <summary>
            Subscribe to events of commit updated for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeCommitDeleted(System.String)">
            <summary>
            Subscribe to events of commit updated for a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeUserStreamAdded">
            <summary>
            Subscribe to events of streams added for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeStreamUpdated(System.String)">
            <summary>
            Subscribe to events of streams updated for a specific streamId
            </summary>
            <param name="id">streamId</param>
        </member>
        <member name="M:Speckle.Core.Api.Client.SubscribeUserStreamRemoved">
            <summary>
            Subscribe to events of streams removed for the current user
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Speckle.Core.Api.Stream.branch">
            <summary>
            Set only in the case that you've requested this through <see cref="M:Speckle.Core.Api.Client.BranchGet(System.Threading.CancellationToken,System.String,System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Speckle.Core.Api.Stream.commit">
            <summary>
            Set only in the case that you've requested this through <see cref="M:Speckle.Core.Api.Client.CommitGet(System.Threading.CancellationToken,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Speckle.Core.Api.Stream.commits">
            <summary>
            Set only in the case that you've requested this through <see cref="M:Speckle.Core.Api.Client.StreamGetCommits(System.Threading.CancellationToken,System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Speckle.Core.Api.Helpers.Receive(System.String,Speckle.Core.Credentials.Account,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception},System.Action{System.Int32})">
            <summary>
            Helper method to Receive from a Speckle Server.
            </summary>
            <param name="stream">Stream URL or Id to receive from. If the URL contains branchName, commitId or objectId those will be used, otherwise the latest commit from main will be received.</param>
            <param name="account">Account to use. If not provided the default account will be used.</param>
            <param name="onProgressAction">Action invoked on progress iterations.</param>
            <param name="onErrorAction">Action invoked on internal errors.</param>
            <param name="onTotalChildrenCountKnown">Action invoked once the total count of objects is known.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Helpers.Send(System.String,Speckle.Core.Models.Base,System.String,System.String,System.Int32,Speckle.Core.Credentials.Account,System.Boolean,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception})">
            <summary>
            Helper method to Send to a Speckle Server.
            </summary>
            <param name="stream">Stream URL or Id to send to. If the URL contains branchName, commitId or objectId those will be used, otherwise the latest commit from main will be received.</param>
            <param name="data">Data to send</param>
            <param name="account">Account to use. If not provided the default account will be used.</param>
            <param name="useDefaultCache">Toggle for the default cache. If set to false, it will only send to the provided transports.</param>
            <param name="onProgressAction">Action invoked on progress iterations.</param>
            <param name="onErrorAction">Action invoked on internal errors.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Helpers.IsConnectorUpdateAvailable(System.String)">
            <summary>
            
            </summary>
            <param name="slug">The connector slug eg. revit, rhino, etc</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Speckle.Core.Api.Operations" -->
        <member name="M:Speckle.Core.Api.Operations.GetSerializerInstance">
            <summary>
            Convenience method to instantiate an instance of the default object serializer and settings pre-populated with it.
            </summary>    
        </member>
        <!-- Badly formed XML comment ignored for member "M:Speckle.Core.Api.Operations.GetInternalProgressAction(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32},System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}})" -->
        <member name="M:Speckle.Core.Api.Operations.Receive(System.String,Speckle.Core.Transports.ITransport,Speckle.Core.Transports.ITransport,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception},System.Action{System.Int32},System.Boolean,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Receives an object from a transport.
            </summary>
            <param name="objectId"></param>
            <param name="remoteTransport">The transport to receive from.</param>
            <param name="localTransport">Leave null to use the default cache.</param>
            <param name="onProgressAction">Action invoked on progress iterations.</param>
            <param name="onErrorAction">Action invoked on internal errors.</param>
            <param name="onTotalChildrenCountKnown">Action invoked once the total count of objects is known.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Receive(System.String,System.Threading.CancellationToken,Speckle.Core.Transports.ITransport,Speckle.Core.Transports.ITransport,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception},System.Action{System.Int32},System.Boolean,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Receives an object from a transport.
            </summary>
            <param name="objectId"></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to send notice of cancellation.</param>
            <param name="remoteTransport">The transport to receive from.</param>
            <param name="localTransport">Leave null to use the default cache.</param>
            <param name="onProgressAction">Action invoked on progress iterations.</param>
            <param name="onErrorAction">Action invoked on internal errors.</param>
            <param name="onTotalChildrenCountKnown">Action invoked once the total count of objects is known.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Send(Speckle.Core.Models.Base,System.Collections.Generic.List{Speckle.Core.Transports.ITransport},System.Boolean,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception},System.Boolean,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Sends an object via the provided transports. Defaults to the local cache. 
            </summary>
            <param name="object">The object you want to send.</param>
            <param name="transports">Where you want to send them.</param>
            <param name="useDefaultCache">Toggle for the default cache. If set to false, it will only send to the provided transports.</param>
            <param name="onProgressAction">Action that gets triggered on every progress tick (keeps track of all transports).</param>
            <param name="onErrorAction">Use this to capture and handle any errors from within the transports.</param>
            <returns>The id (hash) of the object.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Send(Speckle.Core.Models.Base,System.Threading.CancellationToken,System.Collections.Generic.List{Speckle.Core.Transports.ITransport},System.Boolean,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Int32}},System.Action{System.String,System.Exception},System.Boolean,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Sends an object via the provided transports. Defaults to the local cache. 
            </summary>
            <param name="object">The object you want to send.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to send notice of cancellation.</param>
            <param name="transports">Where you want to send them.</param>
            <param name="useDefaultCache">Toggle for the default cache. If set to false, it will only send to the provided transports.</param>
            <param name="onProgressAction">Action that gets triggered on every progress tick (keeps track of all transports).</param>
            <param name="onErrorAction">Use this to capture and handle any errors from within the transports.</param>
            <returns>The id (hash) of the object.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Serialize(Speckle.Core.Models.Base)">
            <summary>
            Serializes a given object. Note: if you want to save and persist an object to a Speckle Transport or Server, please use any of the "Send" methods. See <see cref="!:Send(Base, List&lt;Transports.ITransport&gt;, bool, Action&lt;System.Collections.Concurrent.ConcurrentDictionary&lt;string, int&gt;&gt;, Action&lt;string, Exception&gt;)"/>.
            </summary>
            <param name="object"></param>
            <returns>A json string representation of the object.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Serialize(Speckle.Core.Models.Base,System.Threading.CancellationToken,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Serializes a given object. Note: if you want to save and persist an object to Speckle Transport or Server, please use any of the "Send" methods. See <see cref="!:Send(Base, List&lt;Transports.ITransport&gt;, bool, Action&lt;System.Collections.Concurrent.ConcurrentDictionary&lt;string, int&gt;&gt;, Action&lt;string, Exception&gt;)"/>.
            </summary>
            <param name="object"></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A json string representation of the object.</returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Serialize(System.Collections.Generic.List{Speckle.Core.Models.Base})">
            <summary>
            Serializes a list of objects. Note: if you want to save and persist objects to speckle, please use any of the "Send" methods.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Serialize(System.Collections.Generic.Dictionary{System.String,Speckle.Core.Models.Base})">
            <summary>
            Serializes a list of objects. Note: if you want to save and persist objects to speckle, please use any of the "Send" methods.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Deserialize(System.String)">
            <summary>
            Deserializes a given object. Note: if you want to pull an object from a Speckle Transport or Server, please use any of the <see cref="!:Receive(string, Transports.ITransport, Transports.ITransport, Action&lt;System.Collections.Concurrent.ConcurrentDictionary&lt;string, int&gt;&gt;)"/>.
            </summary>
            <param name="object">The json string representation of a speckle object that you want to deserialise.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.Deserialize(System.String,System.Threading.CancellationToken,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Deserializes a given object. Note: if you want to pull an object from a Speckle Transport or Server, please use any of the <see cref="!:Receive(string, Transports.ITransport, Transports.ITransport, Action&lt;System.Collections.Concurrent.ConcurrentDictionary&lt;string, int&gt;&gt;)"/>.
            </summary>
            <param name="object">The json string representation of a speckle object that you want to deserialise.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.DeserializeArray(System.String,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Deserializes a list of objects into an array. Note: if you want to pull an object from speckle (either local or remote), please use any of the "Receive" methods.
            </summary>
            <param name="objectArr"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Api.Operations.DeserializeDictionary(System.String)">
            <summary>
            Deserializes a dictionary object. Note: if you want to pull an object from speckle (either local or remote), please use any of the "Receive" methods.
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:Speckle.Core.Credentials.AccountManager">
            <summary>
            Manage accounts locally for desktop applications.
            </summary>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetServerInfo(System.String)">
            <summary>
            Gets the basic information about a server. 
            </summary>
            <param name="server">Server URL</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetUserInfo(System.String,System.String)">
            <summary>
            Gets basic user information given a token and a server.
            </summary>
            <param name="token"></param>
            <param name="server">Server URL</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetUserServerInfo(System.String,System.String)">
            <summary>
            Gets basic user and server information given a token and a server.
            </summary>
            <param name="token"></param>
            <param name="server">Server URL</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetDefaultServerUrl">
            <summary>
            The Default Server URL for authentication, can be overridden by placing a file with the alternatrive url in the Speckle folder
            </summary>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetAccounts(System.String)">
            <summary>
            Gets all the accounts for a given server.
            </summary>
            <param name="serverUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetDefaultAccount">
            <summary>
            Gets this environment's default account if any. If there is no default, the first found will be returned and set as default.
            </summary>
            <returns>The default account or null.</returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetAccounts">
            <summary>
            Gets all the accounts present in this environment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.GetLocalAccounts">
            <summary>
            Gets the local accounts
            These are accounts not handled by Manager and are stored in json format in a local directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.UpdateAccounts">
            <summary>
            Refetches user and server info for each account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.RemoveAccount(System.String)">
            <summary>
            Removes an account
            </summary>
            <param name="id">ID of the account to remove</param>
        </member>
        <member name="M:Speckle.Core.Credentials.AccountManager.AddAccount(System.String)">
            <summary>
            Adds an account by propting the user to log in via a web flow
            </summary>
            <param name="server">Server to use to add the account, if not provied the default Server will be used</param>
            <returns></returns>
        </member>
        <member name="P:Speckle.Core.Credentials.StreamWrapper.IsValid">
            <summary>
            Determines if the current stream wrapper contains a valid stream.
            </summary>
        </member>
        <member name="M:Speckle.Core.Credentials.StreamWrapper.#ctor(System.String)">
            <summary>
            Creates a StreamWrapper from a stream url or a stream id
            </summary>
            <param name="streamUrlOrId">Stream Url eg: http://speckle.server/streams/8fecc9aa6d/commits/76a23d7179  or stream ID eg: 8fecc9aa6d</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Speckle.Core.Credentials.StreamWrapper.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a StreamWrapper by streamId, userId and serverUrl
            </summary>
            <param name="streamId"></param>
            <param name="userId"></param>
            <param name="serverUrl"></param>
        </member>
        <member name="M:Speckle.Core.Credentials.StreamWrapper.GetAccount">
            <summary>
            Gets a valid account for this stream wrapper. 
            <para>Note: this method ensures that the stream exists and/or that the user has an account which has access to that stream. If used in a sync manner, make sure it's not blocking.</para>
            </summary>
            <exception cref="T:System.Exception">Throws exception if account fetching failed. This could be due to non-existent account or stream.</exception>
            <returns>The valid account object for this stream.</returns>
        </member>
        <member name="T:Speckle.Core.Kits.HostApplications">
            <summary>
            List of Host Applications - their slugs should match our ghost tags and ci/cd slugs
            </summary>
        </member>
        <member name="T:Speckle.Core.Kits.VersionedHostApplications">
            <summary>
            List of Host Applications with their versions 
            Do not change these - they must match the converter names!
            </summary>
        </member>
        <member name="T:Speckle.Core.Kits.SchemaMainParam">
            <summary>
            Used to indicate which is the main input parameter of the schema builder component. Schema info will be attached to this object.
            </summary>
        </member>
        <member name="T:Speckle.Core.Kits.SchemaIgnore">
            <summary>
            Used to ignore properties from expand objects etc
            </summary>
        </member>
        <member name="P:Speckle.Core.Kits.ISpeckleConverter.Report">
            <summary>
            Keeps track of the conversion process
            </summary>
        </member>
        <member name="P:Speckle.Core.Kits.ISpeckleConverter.ReceiveMode">
            <summary>
            Decides what to do when an element being received already exists
            </summary>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.ConvertToSpeckle(System.Object)">
            <summary>
            Converts a native object to a Speckle one
            </summary>
            <param name="object">Native object to convert</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.ConvertToSpeckle(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts a list of objects to Speckle.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.CanConvertToSpeckle(System.Object)">
            <summary>
            Checks if it can convert a native object to a Speckle one
            </summary>
            <param name="object">Native object to convert</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.ConvertToNative(Speckle.Core.Models.Base)">
            <summary>
            Converts a Speckle object to a native one
            </summary>
            <param name="object">Speckle object to convert</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.ConvertToNative(System.Collections.Generic.List{Speckle.Core.Models.Base})">
            <summary>
            Converts a list of Speckle objects to a native ones.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.CanConvertToNative(Speckle.Core.Models.Base)">
            <summary>
            Checks if it can convert a Speckle object to a native one
            </summary>
            <param name="object">Speckle object to convert</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.GetServicedApplications">
            <summary>
            Returns a list of applications serviced by this converter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.SetContextDocument(System.Object)">
            <summary>
            Sets the application document that the converter is targeting
            </summary>
            <param name="doc">The current application document</param>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.SetContextObjects(System.Collections.Generic.List{Speckle.Core.Models.ApplicationPlaceholderObject})">
            <summary>
            Some converters need to know which other objects are being converted, in order to sort relationships between them (ie, Revit). Use this method to set them.
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.SetPreviousContextObjects(System.Collections.Generic.List{Speckle.Core.Models.ApplicationPlaceholderObject})">
            <summary>
            Some converters need to know which objects have been converted before in order to update them (ie, Revit). Use this method to set them.
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleConverter.SetConverterSettings(System.Object)">
            <summary>
            Some converters need to be able to receive some settings to modify their internal behaviour (i.e. Rhino's Brep Meshing options). Use this method to set them.
            </summary>
            <param name="settings">The object representing the settings for your converter.</param>
        </member>
        <member name="P:Speckle.Core.Kits.ISpeckleKit.Types">
            <summary>
            Returns all the object types (the object model) provided by this kit.
            </summary>
        </member>
        <member name="M:Speckle.Core.Kits.ISpeckleKit.LoadConverter(System.String)">
            <summary>
            Tries to load a converter for a specific app. 
            </summary>
            <param name="app">Must be one of the Kits.Applications variables.</param>
            <returns>The converter for the specific app, or null.</returns>
        </member>
        <member name="T:Speckle.Core.Kits.CoreKit">
            <summary>
            Needed so we can properly deserialize all the Base-derived objects from Core itself.
            </summary>
        </member>
        <member name="P:Speckle.Core.Kits.KitManager.KitsFolder">
            <summary>
            Local installations store kits in C:\Users\USERNAME\AppData\Roaming\Speckle\Kits
            Admin/System-wide installations in C:\ProgramData\Speckle\Kits
            </summary>
        </member>
        <member name="M:Speckle.Core.Kits.KitManager.HasKit(System.String)">
            <summary>
            Checks wether a specific kit exists.
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.KitManager.GetKit(System.String)">
            <summary>
            Gets a specific kit.
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="P:Speckle.Core.Kits.KitManager.Kits">
            <summary>
            Returns a list of all the kits found on this user's device.
            </summary>
        </member>
        <member name="P:Speckle.Core.Kits.KitManager.Types">
            <summary>
            Returns a list of all the types found in all the kits on this user's device.
            </summary>
        </member>
        <member name="M:Speckle.Core.Kits.KitManager.GetDefaultKit">
            <summary>
            Gets the default Speckle provided kit, "Objects".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.KitManager.GetKitsWithConvertersForApp(System.String)">
            <summary>
            TODO: Returns all the kits with potential converters for the software app. 
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Kits.KitManager.Initialize(System.String)">
            <summary>
            Tells the kit manager to initialise from a specific location.
            </summary>
            <param name="kitFolderLocation"></param>
        </member>
        <member name="M:Speckle.Core.Kits.AssemblyExtensions.IsReferencing(System.Reflection.Assembly,System.Reflection.AssemblyName)">
            <summary>
            Indicates if a given assembly references another which is identified by its name.
            </summary>
            <param name="assembly">The assembly which will be probed.</param>
            <param name="referenceName">The reference assembly name.</param>
            <returns>A boolean value indicating if there is a reference.</returns>
        </member>
        <member name="T:Speckle.Core.Logging.Analytics">
            <summary>
             Anonymous telemetry to help us understand how to make a better Speckle.
             This really helps us to deliver a better open source project and product!
            </summary>
        </member>
        <member name="T:Speckle.Core.Logging.Analytics.Events">
            <summary>
            Default Mixpanel events
            </summary>
        </member>
        <member name="F:Speckle.Core.Logging.Analytics.Events.Send">
            <summary>
            Event triggered when data is sent to a Speckle Server
            </summary>
        </member>
        <member name="F:Speckle.Core.Logging.Analytics.Events.Receive">
            <summary>
            Event triggered when data is received from a Speckle Server
            </summary>
        </member>
        <member name="F:Speckle.Core.Logging.Analytics.Events.NodeRun">
            <summary>
            Event triggered when a node is executed in a visual programming environment, it should contain the name of the action and the host application
            </summary>
        </member>
        <member name="F:Speckle.Core.Logging.Analytics.Events.DUIAction">
            <summary>
            Event triggered when an action is executed in Desktop UI, it should contain the name of the action and the host application
            </summary>
        </member>
        <member name="F:Speckle.Core.Logging.Analytics.Events.NodeCreate">
            <summary>
            Event triggered when a node is first created in a visual programming environment, it should contain the name of the action and the host application
            </summary>
        </member>
        <member name="P:Speckle.Core.Logging.Analytics.LastEmail">
            <summary>
            Cached email
            </summary>
        </member>
        <member name="P:Speckle.Core.Logging.Analytics.LastServer">
            <summary>
            Cached server URL
            </summary>
        </member>
        <member name="M:Speckle.Core.Logging.Analytics.TrackEvent(Speckle.Core.Logging.Analytics.Events,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Tracks an event without specifying the email and server.
            It's not always possible to know which account the user has selected, especially in visual programming.
            Therefore we are caching the email and server values so that they can be used also when nodes such as "Serialize" are used.
            If no account info is cached, we use the default account data.
            </summary>
            <param name="eventName">Name of the even</param>
            <param name="customProperties">Additional parameters to pass in to event</param>
        </member>
        <member name="M:Speckle.Core.Logging.Analytics.TrackEvent(Speckle.Core.Credentials.Account,Speckle.Core.Logging.Analytics.Events,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Tracks an event from a specified account, anonymizes personal information
            </summary>
            <param name="account">Account to use, it will be anonymized</param>
            <param name="eventName">Name of the event</param>
            <param name="customProperties">Additional parameters to pass to the event</param>
        </member>
        <member name="M:Speckle.Core.Logging.Analytics.TrackEvent(System.String,System.String,Speckle.Core.Logging.Analytics.Events,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Tracks an event from a specified email and server, anonymizes personal information
            </summary>
            <param name="email">Email of the user, it will be anonymized</param>
            <param name="server">Server URL, it will be anonymized</param>
            <param name="eventName">Name of the event</param>
            <param name="customProperties">Additional parameters to pass to the event</param>
        </member>
        <member name="T:Speckle.Core.Logging.Log">
            <summary>
             Anonymous telemetry to help us understand how to make a better Speckle.
             This really helps us to deliver a better open source project and product!
            </summary>
        </member>
        <member name="T:Speckle.Core.Logging.Setup">
            <summary>
             Anonymous telemetry to help us understand how to make a better Speckle.
             This really helps us to deliver a better open source project and product!
            </summary>
        </member>
        <member name="P:Speckle.Core.Logging.Setup.HostApplication">
            <summary>
            Set from the connectors, defines which current host application we're running on.
            </summary>
        </member>
        <member name="P:Speckle.Core.Logging.Setup.VersionedHostApplication">
            <summary>
            Set from the connectors, defines which current host application we're running on - includes the version.
            </summary>
        </member>
        <member name="P:Speckle.Core.Logging.Setup.SUUID">
            <summary>
            Tries to get the SUUID set by the Manager
            </summary>
        </member>
        <member name="T:Speckle.Core.Models.DetachProperty">
            <summary>
            <para>Flags an object's property as being detachable.</para>
            <para>If set to true the default serialiser will persist it separately, and add a reference to the property's value in the original object.</para>
            <para>Only applies to properties of types derived from the Base class.</para>
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.DetachProperty.#ctor(System.Boolean)">
            <summary>
            <para>Flags an object's property as being detachable.</para>
            <para>If set to true the default serialiser will persist it separately, and add a reference to the property's value in the original object.</para>
            <para>Only applies to properties of types derived from the Base class.</para>
            </summary>
            <param name="_detachable">Wether to detach the property or not.</param>
        </member>
        <member name="T:Speckle.Core.Models.Chunkable">
            <summary>
            Flags a list or array as splittable into chunks during serialisation. These chunks will be recomposed on deserialisation into the original list. Note: this attribute should be used in conjunction with <see cref="T:Speckle.Core.Models.DetachProperty"/>.
            <para>Use this attribute on properties that can become very long and are not worth detaching into individual elements.</para>
            <para>Objects per chunk: for simple types, like numbers, use a high value (>10000); for other objects, use a more conservative number depending on their serialised size.</para>
            </summary>
        </member>
        <member name="T:Speckle.Core.Models.Base">
            <summary>
            Base class for all Speckle object definitions. Provides unified hashing, type extraction and serialisation.
            <para>When developing a speckle kit, use this class as a parent class.</para>
            <para><b>Dynamic properties naming conventions:</b></para>
            <para>👉 "__" at the start of a property means it will be ignored, both for hashing and serialisation (e.g., "__ignoreMe").</para>
            <para>👉 "@" at the start of a property name means it will be detached (when serialised with a transport) (e.g.((dynamic)obj)["@meshEquivalent"] = ...) .</para>
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.Base.id">
            <summary>
            A speckle object's id is an unique hash based on its properties. <b>NOTE: this field will be null unless the object was deserialised from a source. Use the <see cref="!:GetId(bool)"/> function to get it.</b>
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.Base.GetId(System.Boolean,Speckle.Core.Api.SerializerVersion)">
            <summary>
            Gets the id (a unique hash) of this object. ⚠️ This method fully serializes the object, which in the case of large objects (with many sub-objects), has a tangible cost. Avoid using it!
            <para><b>Hint:</b> Objects that are retrieved/pulled from a server/local cache do have an id (hash) property pre-populated.</para>
            <para><b>Note:</b>The hash of a decomposed object differs from the hash of a non-decomposed object.</para>
            </summary>
            <param name="decompose">If true, will decompose the object in the process of hashing.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.Base.GetTotalChildrenCount">
            <summary>
            Attempts to count the total number of detachable objects.
            </summary>
            <returns>The total count of the detachable children + 1 (itself).</returns>
        </member>
        <member name="M:Speckle.Core.Models.Base.ShallowCopy">
            <summary>
            Creates a shallow copy of the current base object.
            This operation does NOT copy/duplicate the data inside each prop.
            The new object's property values will be pointers to the original object's property value.
            </summary>
            <returns>A shallow copy of the original object.</returns>
        </member>
        <member name="P:Speckle.Core.Models.Base.totalChildrenCount">
            <summary>
            This property will only be populated if the object is retreieved from storage. Use <see cref="M:Speckle.Core.Models.Base.GetTotalChildrenCount"/> otherwise. 
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.Base.applicationId">
            <summary>
            Secondary, ideally host application driven, object identifier.
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.Base.speckle_type">
            <summary>
            Holds the type information of this speckle object, derived automatically
            from its assembly name and inheritance.
            </summary>
        </member>
        <member name="T:Speckle.Core.Models.DynamicBase">
            <summary>
            Base class implementing a bunch of nice dynamic object methods, like adding and removing props dynamically. Makes c# feel like json.
            <para>Orginally adapted from Rick Strahl 🤘</para>
            <para>https://weblog.west-wind.com/posts/2012/feb/08/creating-a-dynamic-extensible-c-expando-object</para>
            </summary>
        </member>
        <member name="F:Speckle.Core.Models.DynamicBase.properties">
            <summary>
            The actual property bag, where dynamically added props are stored.
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets properties via the dot syntax.
            <para><pre>((dynamic)myObject).superProperty;</pre></para>
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets properties via the dot syntax.
            <para><pre>((dynamic)myObject).superProperty = something;</pre></para>
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Speckle.Core.Models.DynamicBase.Item(System.String)">
            <summary>
            Sets and gets properties using the key accessor pattern. E.g.:
            <para><pre>((dynamic)myObject)["superProperty"] = 42;</pre></para>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetDynamicMemberNames">
            <summary>
            Gets all of the property names on this class, dynamic or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetInstanceMembersNames">
            <summary>
            Gets the names of the defined class properties (typed).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetInstanceMembers">
            <summary>
            Gets the defined (typed) properties of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetMemberNames">
            <summary>
            Gets the names of the typed and dynamic properties that don't have a [SchemaIgnore] attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetMembers">
            <summary>
             Gets the typed and dynamic properties that don't have a [SchemaIgnore] attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.GetDynamicMembers">
            <summary>
            Gets the dynamically added property names only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.DynamicBase.IsWrapper">
            <summary>
            Currently we assume having only 1 property means we auto-wrap it around a DynamicBase, therefore is a wrapper. This might change in the future.
            </summary>
        </member>
        <member name="T:Speckle.Core.Models.Abstract">
            <summary>
            Wrapper around other, third party, classes that are not coming from a speckle kit.
            <para>Serialization and deserialization of the base object happens through default Newtonsoft converters. If your object does not de/serialize correctly, this class will not prevent that from happening.</para>
            <para><b>Limitations:</b></para>
            <para>- Base object needs to be serializable.</para>
            <para>- Inline collection declarations with values do not behave correctly.</para>
            <para>- Your class needs to have a void constructor.</para>
            <para>- Probably more. File a bug!</para>
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.Abstract.base">
            <summary>
            The original object.
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.Abstract.#ctor">
            <summary>
            See <see cref="T:Speckle.Core.Models.Abstract"/> for limitations of this approach.
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.Abstract.#ctor(System.Object)">
            <summary>
            See <see cref="T:Speckle.Core.Models.Abstract"/> for limitations of this approach.
            </summary>
            <param name="_original"></param>
        </member>
        <member name="T:Speckle.Core.Models.DataChunk">
            <summary>
            <para>In short, this helps you chunk big things into smaller things.</para>
            See the following <see href="https://pics.me.me/chunky-boi-57848570.png">reference.</see>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Speckle.Core.Models.ApplicationPlaceholderObject">
            <summary>
            A simple wrapper to keep track of the relationship between speckle objects and their host-application siblings in cases where the
            <see cref="P:Speckle.Core.Models.Base.applicationId"/> cannot correspond with the <see cref="P:Speckle.Core.Models.ApplicationPlaceholderObject.ApplicationGeneratedId"/> (ie, on receiving operations). 
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.ProgressReport.ConversionLog">
            <summary>
            Keeps track of the conversion process
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.ProgressReport.ConversionErrors">
            <summary>
            Keeps track of errors in the conversions.
            </summary>
        </member>
        <member name="P:Speckle.Core.Models.ProgressReport.OperationErrors">
            <summary>
            Keeps track of errors in the operations of send/receive.
            </summary>
        </member>
        <member name="M:Speckle.Core.Models.Utilities.hashString(System.String,Speckle.Core.Models.Utilities.HashingFuctions)">
            <summary>
            Wrapper method around hashing functions. Defaults to md5.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Models.Utilities.SplitList``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Chunks a list into pieces.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="chunkSize"></param>
            <returns></returns>
        </member>
        <member name="F:Speckle.Core.Serialisation.BaseObjectDeserializerV2.TypeDiscriminator">
            <summary>
            Property that describes the type of the object.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectDeserializerV2.ReadTransport">
            <summary>
            The sync transport. This transport will be used synchronously. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Speckle.Core.Serialisation.BaseObjectSerializer" -->
        <member name="F:Speckle.Core.Serialisation.BaseObjectSerializer.TypeDiscriminator">
            <summary>
            Property that describes the type of the object.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializer.ReadTransport">
            <summary>
            The sync transport. This transport will be used synchronously. 
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializer.WriteTransports">
            <summary>
            List of transports to write to.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializer.DetachLineage">
            <summary>
            Keeps track of wether current property pointer is marked for detachment.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializer.Lineage">
            <summary>
            Keeps track of the hash chain through the object tree.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializer.RefMinDepthTracker">
            <summary>
            Dictionary of object if and its subsequent closure table (a dictionary of hashes and min depth at which they are found).
            </summary>
        </member>
        <member name="M:Speckle.Core.Serialisation.BaseObjectSerializer.ResetAndInitialize">
            <summary>
            Reinitializes the lineage, and other variables that get used during the
            json writing process.
            </summary>
        </member>
        <member name="F:Speckle.Core.Serialisation.BaseObjectSerializerV2.TypeDiscriminator">
            <summary>
            Property that describes the type of the object.
            </summary>
        </member>
        <member name="P:Speckle.Core.Serialisation.BaseObjectSerializerV2.WriteTransports">
            <summary>
            The sync transport. This transport will be used synchronously. 
            </summary>
        </member>
        <member name="M:Speckle.Core.Serialisation.SerializationUtilities.FlushCachedTypes">
            <summary>
            Flushes kit's (discriminator, type) cache. Useful if you're dynamically loading more kits at runtime, that provide better coverage of what you're deserialising, and it's now somehow poisoned because the higher level types were not originally available.
            </summary>
        </member>
        <member name="T:Speckle.Core.Transports.ITransport">
            <summary>
            Interface defining the contract for transport implementations.
            </summary>
        </member>
        <member name="P:Speckle.Core.Transports.ITransport.CancellationToken">
            <summary>
            Should be checked often and gracefully stop all in progress sending if requested.
            </summary>
        </member>
        <member name="P:Speckle.Core.Transports.ITransport.OnProgressAction">
            <summary>
            Used to report progress during the transport's longer operations.
            </summary>
        </member>
        <member name="P:Speckle.Core.Transports.ITransport.OnErrorAction">
            <summary>
            Used to report errors during the transport's longer operations.
            </summary>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.BeginWrite">
            <summary>
            Optional: signals to the transport that writes are about to begin.
            </summary>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.EndWrite">
            <summary>
            Optional: signals to the transport that no more items will need to be written.
            </summary>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.SaveObject(System.String,System.String)">
            <summary>
            Saves an object.
            </summary>
            <param name="id">The hash of the object.</param>
            <param name="serializedObject">The full string representation of the object.</param>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.SaveObject(System.String,Speckle.Core.Transports.ITransport)">
            <summary>
            Saves an object, retrieveing its serialised version from the provided transport. 
            </summary>
            <param name="id">The hash of the object.</param>
            <param name="sourceTransport">The transport from where to retrieve it.</param>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.WriteComplete">
            <summary>
            Awaitable method to figure out whether writing is completed. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.GetObject(System.String)">
            <summary>
            Gets an object.
            </summary>
            <param name="id">The object's hash.</param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.CopyObjectAndChildren(System.String,Speckle.Core.Transports.ITransport,System.Action{System.Int32})">
            <summary>
            Copies the parent object and all its children to the provided transport.
            </summary>
            <param name="id">The id of the object you want to copy.</param>
            <param name="targetTransport">The transport you want to copy the object to.</param>
            <param name="onTotalChildrenCountKnown">(Optional) an action that will be invoked once, when the amount of object children to be copied over is known.</param>
            <returns>The string representation of the root object.</returns>
        </member>
        <member name="M:Speckle.Core.Transports.ITransport.HasObjects(System.Collections.Generic.List{System.String})">
            <summary>
            Checks if objects are present in the transport
            </summary>
            <param name="objectIds">List of object ids to check</param>
            <returns>A dictionary with the specified object ids as keys and boolean values, whether each object is present in the transport or not</returns>
        </member>
        <member name="T:Speckle.Core.Transports.MemoryTransport">
            <summary>
            An in memory storage of speckle objects.
            </summary>
        </member>
        <member name="T:Speckle.Core.Transports.ServerTransportV1">
            <summary>
            Sends data to a speckle server. 
            TODOs:
            - gzip
            - preflight deltas on sending data
            - preflight deltas on receving/copying data to an existing transport? 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Speckle.Core.Transports.ServerTransportV1.ConsumeNewBatch" -->
        <member name="T:Speckle.Core.Transports.GzipContent">
            <summary>
            https://cymbeline.ch/2014/03/16/gzip-encoding-an-http-post-request-body/
            </summary>
        </member>
        <member name="T:Speckle.Core.Transports.ServerUtils.GzipContent">
            <summary>
            https://cymbeline.ch/2014/03/16/gzip-encoding-an-http-post-request-body/
            </summary>
        </member>
        <member name="P:Speckle.Core.Transports.ServerUtils.ServerApi.OnBatchSent">
            <summary>
            Callback when sending batches. Parameters: object count, total bytes sent
            </summary>
        </member>
        <member name="F:Speckle.Core.Transports.SQLiteTransport.WriteTimer">
            <summary>
            Timer that ensures queue is consumed if less than MAX_TRANSACTION_SIZE objects are being sent.
            </summary>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.WriteComplete">
            <summary>
            Awaits untill write completion (ie, the current queue is fully consumed).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.GetWriteCompletionStatus">
            <summary>
            Returns true if the current write queue is empty and comitted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.SaveObject(System.String,System.String)">
            <summary>
            Adds an object to the saving queue. 
            </summary>
            <param name="hash"></param>
            <param name="serializedObject"></param>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.SaveObjectSync(System.String,System.String)">
            <summary>
            Directly saves the object in the db.
            </summary>
            <param name="hash"></param>
            <param name="serializedObject"></param>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.GetObject(System.String)">
            <summary>
            Gets an object.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.GetAllObjects">
            <summary>
            Returns all the objects in the store. Note: do not use for large collections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.DeleteObject(System.String)">
            <summary>
            Deletes an object. Note: do not use for any speckle object transport, as it will corrupt the database.
            </summary>
            <param name="hash"></param>
        </member>
        <member name="M:Speckle.Core.Transports.SQLiteTransport.UpdateObject(System.String,System.String)">
            <summary>
            Updates an object.
            </summary>
            <param name="hash"></param>
            <param name="serializedObject"></param>
        </member>
        <member name="M:Speckle.Core.Transports.Utilities.WaitUntil(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Waits until the provided function returns true. 
            </summary>
            <param name="condition"></param>
            <param name="frequency"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
    </members>
</doc>
